{"version":3,"sources":["components/Record.js","components/RecordList.js","components/RecordForm.js","App.js","serviceWorker.js","index.js"],"names":["Course","record","refreshRecords","formatted_birthday","birthday","replace","deleteRecord","a","fetch","method","body","JSON","stringify","id","console","error","className","name","tel","email","address","firstVisit","lastVisit","onClick","RecordList","records","map","key","RecordForm","recordAdded","useState","setName","setBirthday","setTel","setEmail","setAddress","setFirstVisit","setLastVisit","submitRecord","e","preventDefault","onSubmit","htmlFor","type","value","onChange","target","App","setCourses","loadRecords","res","json","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.121cc14c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Course({ record, refreshRecords }) {\n  const formatted_birthday = record.birthday.replace(/-/g, \" / \");\n  const deleteRecord = async () => {\n    try {\n      await fetch(\"/api/records\", {\n        method: \"DELETE\",\n        body: JSON.stringify({ id: record.id }),\n      });\n      refreshRecords();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"list-group-item\">\n      <h4 className=\"list-group-item-heading mt-4 mb-4\">\n        お名前：{record.name}\n      </h4>\n      <p className=\"list-group-item-heading\">生年月日：{formatted_birthday}</p>\n      <p className=\"list-group-item-heading\">電話番号：{record.tel}</p>\n      <p className=\"list-group-item-heading\">メールアドレス：{record.email}</p>\n      <p className=\"list-group-item-heading\">住所：{record.address}</p>\n      <p className=\"list-group-item-heading\">初回来店日：{record.firstVisit}</p>\n      <p className=\"list-group-item-heading\">最終来店日：{record.lastVisit}</p>\n      <button className=\"btn btn-sm btn-danger ml-2\" onClick={deleteRecord}>\n        削除\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Record from \"./Record\";\n\nexport default function RecordList({ records, refreshRecords }) {\n  return (\n    <div>\n      <h2 className=\"mt-5 mb-3\">カルテ一覧</h2>\n      <div className=\"list-group\">\n        {records.map((record) => (\n          <Record\n            record={record}\n            key={record.id}\n            refreshRecords={refreshRecords}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function RecordForm({ recordAdded }) {\n  const [name, setName] = useState(\"\");\n  const [birthday, setBirthday] = useState(\"\");\n  const [tel, setTel] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [firstVisit, setFirstVisit] = useState(\"\");\n  const [lastVisit, setLastVisit] = useState(\"\");\n\n  const resetForm = () => {\n    setName(\"\");\n    setBirthday(\"\");\n    setTel(\"\");\n    setEmail(\"\");\n    setAddress(\"\");\n    setFirstVisit(\"\");\n    setLastVisit(\"\");\n  };\n\n  const submitRecord = async (e) => {\n    e.preventDefault();\n    try {\n      await fetch(\"/api/records\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name,\n          birthday,\n          tel,\n          email,\n          address,\n          firstVisit,\n          lastVisit,\n        }),\n      });\n      resetForm();\n      recordAdded();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">カルテを追加する</div>\n      <div className=\"card-body\">\n        <form className=\"\" onSubmit={submitRecord}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">名前</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              className=\"form-control\"\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"birthday\">生年月日</label>\n            <input\n              type=\"date\"\n              name=\"birthday\"\n              value={birthday}\n              className=\"form-control\"\n              onChange={(e) => setBirthday(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"tel\">電話番号</label>\n            <input\n              type=\"tel\"\n              name=\"tel\"\n              value={tel}\n              className=\"form-control\"\n              onChange={(e) => setTel(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"tel\">メールアドレス</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              className=\"form-control\"\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"address\">住所</label>\n            <input\n              type=\"text\"\n              name=\"address\"\n              value={address}\n              className=\"form-control\"\n              onChange={(e) => setAddress(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"firstVisit\">初回来店日</label>\n            <input\n              type=\"date\"\n              name=\"firstVisit\"\n              value={firstVisit}\n              className=\"form-control\"\n              onChange={(e) => setFirstVisit(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"lastVisit\">最終来店日</label>\n            <input\n              type=\"date\"\n              name=\"lastVisit\"\n              value={lastVisit}\n              className=\"form-control\"\n              onChange={(e) => setLastVisit(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            追加する\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport RecordList from \"./components/RecordList\";\nimport RecordForm from \"./components/RecordForm\";\n\nfunction App() {\n  const [records, setCourses] = useState([]);\n\n  const loadRecords = async () => {\n    try {\n      const res = await fetch(\"/api/records\");\n      const records = await res.json();\n      setCourses(records);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    loadRecords();\n  }, []);\n  return (\n    <div className=\"container mt-5 mb-5\">\n      <h1 className=\"mb-5 text-center\">眼鏡システム</h1>\n      <RecordForm recordAdded={loadRecords} />\n      <RecordList records={records} refreshRecords={loadRecords} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}